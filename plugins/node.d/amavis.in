#!@@PERL@@
# -*- perl -*-

=head1 NAME

amavis - plugin to monitor the amavis mail filter

=head1 APPLICABLE SYSTEMS

Hosts running amavis

=head1 CONFIGURATION

Configuration parameters for @@CONFDIR@@/amavis,
if you need to override the defaults below:

 [amavis]
  env.logdir  - Which logfile to use
  env.logfile - What file to read in logdir

=head2 DEFAULT CONFIGURATION

 [amavis]
  env.logdir  /var/log
  env.logfile mail.log

=head1 AUTHOR

Ported to Perl from the original shell script by Mark Meyer.

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

=begin comment

These magic markers are used by munin-node-configure when installing
munin-node.

=end comment

 #%# family=auto
 #%# capabilities=autoconf

=cut

use strict;
use warnings;

use Munin::Plugin;

my $LOGDIR  = (defined($ENV{'logdir'}) ? $ENV{'logdir'} : '/var/log');
my $LOGFILE = (defined($ENV{'logdir'}) ? $ENV{'logfile'} : 'mail.info');

my $logfile = "$LOGDIR/$LOGFILE";

if ( defined($ARGV[0]) and $ARGV[0] eq "autoconf" )
{
    if (-d $LOGDIR)
    {
        if (-f $logfile)
        {
            if (-r $logfile)
            {
                print "yes\n";
                exit 0;
            }
            else
            {
                print "no (logfile '$logfile' not readable)\n";
            }
        }
        else
        {
            print "no (logfile '$logfile' not found)\n";
        }
    }
    else
    {
        print "no (could not find logdir '$LOGDIR')\n";
    }
    exit 0;
}

my @state = restore_state();

my $pos = shift @state;

my $startsize = (stat $logfile)[7];

$pos = $startsize unless defined($pos);

my %mails = @state;

if ( $ARGV[0] and $ARGV[0] eq "config" )
{
    print "graph_title Amavis filter statistics\n";
    print "graph_vlabel mails / \${graph_period}\n";
    print "graph_category antivirus\n";
    print "graph_scale no\n";
    print "graph_args --base 1000 -l 0\n";
    print "graph_period minute\n";
    print "graph_order virus spam_maybe spam_sure total\n";

    foreach my $i (sort keys %mails)
    {
        print "$i.label $i\n";
        print "$i.type DERIVE\n";
        print "$i.info Number of $i mails evaluated by amavis\n";
    }
    exit 0;
}

$pos = parseLogfile($logfile, $pos, $startsize);

foreach my $i (sort keys %mails)
{
    print "$i.value $mails{$i}\n";
}

save_state($pos, %mails);

sub parseLogfile
{
    my ($fname, $start, $stop) = @_;

    my ($logfd, $reset) = tail_open($fname, $start);

    while (tell($logfd) < $stop)
    {
        my $line = <$logfd>;
        chomp ($line);

        if ($line =~ /amavis.*(PASSED CLEAN|SPAMMY|INFECTED|SPAM), .*Hits:/i)
        {
            $mails{total}++;

            if ($line =~ /INFECTED/i)
            {
                $mails{virus}++;
            }
            elsif ($line =~ /SPAMMY/i)
            {
                $mails{spam_maybe}++;
            }
            elsif ($line =~ /SPAM/i)
            {
                $mails{spam_sure}++;
            }
        }
    }
    return tail_close($logfd);
}

# vim:syntax=perl
